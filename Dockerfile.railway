FROM python:3.11-slim-bookworm as requirements-stage

WORKDIR /tmp
RUN pip install poetry
RUN poetry self add poetry-plugin-export
COPY ./pyproject.toml /tmp/pyproject.toml
COPY ./poetry.lock /tmp/poetry.lock
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

FROM python:3.11-slim-bookworm

# Set environment variables for Railway
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH="/app:$PYTHONPATH"

# Railway-specific environment variables
ENV PORT=8000
ENV VIDEO_PATH=/tmp/videos
ENV HAR_PATH=/tmp/har
ENV LOG_PATH=/tmp/log
ENV ARTIFACT_STORAGE_PATH=/tmp/artifacts

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gnupg \
    ca-certificates \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libatspi2.0-0 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libwayland-client0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxkbcommon0 \
    libxrandr2 \
    xvfb \
    x11vnc \
    fluxbox \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY --from=requirements-stage /tmp/requirements.txt /app/requirements.txt
RUN pip install --upgrade pip setuptools wheel
RUN pip install --no-cache-dir --upgrade -r requirements.txt

# Install Playwright browsers
RUN playwright install-deps
RUN playwright install chromium

# Install Node.js for Bitwarden CLI
ENV NODE_VERSION=20.12.2
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g @bitwarden/cli@2024.9.0

# Copy application code
COPY . /app

# Fix circular import issues by ensuring all client modules are properly initialized
# Create directories if they don't exist and fix the __init__.py files
RUN mkdir -p /app/skyvern/client/artifacts /app/skyvern/client/browser_session /app/skyvern/client/workflows

# Create artifacts __init__.py
RUN echo '# This file was auto-generated by Fern from our API Definition.' > /app/skyvern/client/artifacts/__init__.py && \
    echo '' >> /app/skyvern/client/artifacts/__init__.py && \
    echo 'from .client import ArtifactsClient, AsyncArtifactsClient' >> /app/skyvern/client/artifacts/__init__.py && \
    echo '' >> /app/skyvern/client/artifacts/__init__.py && \
    echo '__all__ = ["ArtifactsClient", "AsyncArtifactsClient"]' >> /app/skyvern/client/artifacts/__init__.py

# Create browser_session __init__.py
RUN echo '# This file was auto-generated by Fern from our API Definition.' > /app/skyvern/client/browser_session/__init__.py && \
    echo '' >> /app/skyvern/client/browser_session/__init__.py && \
    echo 'from .client import BrowserSessionClient, AsyncBrowserSessionClient' >> /app/skyvern/client/browser_session/__init__.py && \
    echo '' >> /app/skyvern/client/browser_session/__init__.py && \
    echo '__all__ = ["BrowserSessionClient", "AsyncBrowserSessionClient"]' >> /app/skyvern/client/browser_session/__init__.py

# Create workflows __init__.py
RUN echo '# This file was auto-generated by Fern from our API Definition.' > /app/skyvern/client/workflows/__init__.py && \
    echo '' >> /app/skyvern/client/workflows/__init__.py && \
    echo 'from .client import WorkflowsClient, AsyncWorkflowsClient' >> /app/skyvern/client/workflows/__init__.py && \
    echo '' >> /app/skyvern/client/workflows/__init__.py && \
    echo '__all__ = ["WorkflowsClient", "AsyncWorkflowsClient"]' >> /app/skyvern/client/workflows/__init__.py

# Create necessary directories
RUN mkdir -p /tmp/videos /tmp/har /tmp/log /tmp/artifacts /app/.streamlit

# Copy and set up entrypoint
COPY ./entrypoint-railway.sh /app/entrypoint-railway.sh
RUN chmod +x /app/entrypoint-railway.sh

# Expose port for Railway
EXPOSE $PORT

CMD ["/app/entrypoint-railway.sh"] 