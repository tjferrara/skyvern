FROM python:3.11-slim-bookworm as requirements-stage

WORKDIR /tmp
RUN pip install poetry
RUN poetry self add poetry-plugin-export
COPY ./pyproject.toml /tmp/pyproject.toml
COPY ./poetry.lock /tmp/poetry.lock
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

FROM python:3.11-slim-bookworm

# Set environment variables for Railway
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH="/app:$PYTHONPATH"

# Railway-specific environment variables
ENV PORT=8000
ENV VIDEO_PATH=/tmp/videos
ENV HAR_PATH=/tmp/har
ENV LOG_PATH=/tmp/log
ENV ARTIFACT_STORAGE_PATH=/tmp/artifacts

WORKDIR /app

# Install system dependencies (this layer will be cached)
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gnupg \
    ca-certificates \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libatspi2.0-0 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libwayland-client0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxkbcommon0 \
    libxrandr2 \
    xvfb \
    x11vnc \
    fluxbox \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for Bitwarden CLI (this layer will be cached)
ENV NODE_VERSION=20.12.2
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g @bitwarden/cli@2024.9.0

# Copy requirements and install Python dependencies (this layer will be cached unless requirements change)
COPY --from=requirements-stage /tmp/requirements.txt /app/requirements.txt
RUN pip install --upgrade pip setuptools wheel
RUN pip install --no-cache-dir --upgrade -r requirements.txt

# Install Playwright browsers (this layer will be cached)
RUN playwright install-deps
RUN playwright install chromium

# Create necessary directories early (this layer will be cached)
RUN mkdir -p /tmp/videos /tmp/har /tmp/log /tmp/artifacts /app/.streamlit

# Copy only the client module first to test imports (avoiding main __init__.py dependencies)
COPY ./skyvern/client /app/skyvern/client
RUN touch /app/skyvern/__init__.py

# Test client imports before copying the rest of the application
RUN echo "=== Testing client imports ===" && \
    cd /app && \
    python -c "import skyvern.client.artifacts.client; print('✓ artifacts.client import successful')" && \
    python -c "import skyvern.client.browser_session.client; print('✓ browser_session.client import successful')" && \
    python -c "import skyvern.client.workflows.client; print('✓ workflows.client import successful')" && \
    python -c "import skyvern.client.agent.client; print('✓ agent.client import successful')" && \
    python -c "import skyvern.client.credentials.client; print('✓ credentials.client import successful')" && \
    echo "All client imports successful!"

# Copy the rest of the application code (this layer changes most frequently)
COPY . /app

# Copy and set up entrypoint
COPY ./entrypoint-railway.sh /app/entrypoint-railway.sh
RUN chmod +x /app/entrypoint-railway.sh

# Expose port for Railway
EXPOSE $PORT

CMD ["/app/entrypoint-railway.sh"] 